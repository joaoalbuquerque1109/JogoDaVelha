package src;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TicTacToe extends JFrame {
    private JButton[][] buttons;
    private boolean xTurn = true;

    public TicTacToe() {
        buttons = new JButton[3][3];
        setLayout(new GridLayout(3, 3));

        // Inicializa os bot√µes e adiciona a grade
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                buttons[row][col] = new JButton();
                buttons[row][col].setFont(new Font("Arial", Font.PLAIN, 60));
                buttons[row][col].setFocusPainted(false);
                buttons[row][col].addActionListener(new ButtonClickListener(row, col));
                add(buttons[row][col]);
            }
        }

        setTitle("Jogo da Velha");
        setSize(300, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    private class ButtonClickListener implements ActionListener {
        private int row;
        private int col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (buttons[row][col].getText().equals("") && checkWinner() == null) {
                if (xTurn) {
                    buttons[row][col].setText("X");
                } else {
                    buttons[row][col].setText("O");
                }
                xTurn = !xTurn;
                String winner = checkWinner();
                if (winner != null) {
                    JOptionPane.showMessageDialog(null, winner + " ganhou!");
                    resetBoard();
                } else if (isBoardFull()) {
                    JOptionPane.showMessageDialog(null, "Empate!");
                    resetBoard();
                }
            }
        }
    }

    private String checkWinner() {
        // Verifica linhas, colunas e diagonais para um vencedor
        for (int i = 0; i < 3; i++) {
            if (buttons[i][0].getText().equals(buttons[i][1].getText()) && 
                buttons[i][1].getText().equals(buttons[i][2].getText()) && 
                !buttons[i][0].getText().equals("")) {
                return buttons[i][0].getText();
            }
            if (buttons[0][i].getText().equals(buttons[1][i].getText()) && 
                buttons[1][i].getText().equals(buttons[2][i].getText()) && 
                !buttons[0][i].getText().equals("")) {
                return buttons[0][i].getText();
            }
        }
        if (buttons[0][0].getText().equals(buttons[1][1].getText()) && 
            buttons[1][1].getText().equals(buttons[2][2].getText()) && 
            !buttons[0][0].getText().equals("")) {
            return buttons[0][0].getText();
        }
        if (buttons[0][2].getText().equals(buttons[1][1].getText()) && 
            buttons[1][1].getText().equals(buttons[2][0].getText()) && 
            !buttons[0][2].getText().equals("")) {
            return buttons[0][2].getText();
        }
        return null;
    }

    private boolean isBoardFull() {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (buttons[row][col].getText().equals("")) {
                    return false;
                }
            }
        }
        return true;
    }

    private void resetBoard() {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                buttons[row][col].setText("");
            }
        }
        xTurn = true;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new TicTacToe());
    }
}
